# Config options ###
include(CMakeDependentOption)
include(CheckCXXCompilerFlag)

option(ENABLE_STATIC_ANALYZER "Enable Static analyzer" OFF)
option(ENABLE_STATIC_ANALYZER_INCLUDE_WHAT_YOU_USE "Enable Static analyzer for include-what-you-use" OFF)
option(ENABLE_TESTING "Enable the tests" ${PROJECT_IS_TOP_LEVEL})
option(DISABLE_COVERAGE "Disable Coverage (Testing)" OFF)
option(DISABLE_SANITIZER "Disable Sanitizer" OFF)
if(CMAKE_CXX_COMPILER_ID MATCHES ".*Clang.*")
  option(ENABLE_TIME_TRACE "enable (clang) -ftime-trace flag" OFF)
endif()
if(ENABLE_TESTING)
  list(APPEND VCPKG_MANIFEST_FEATURES "tests")
endif()
option(ENABLE_BENCHMARKS "Enable Benchmark" ON)

# option(ENABLE_FUZZING "Enable Fuzzing Builds" ${ENABLE_DEVELOPER_MODE})
include(cmake/LibFuzzer.cmake)
check_libfuzzer_support(LIBFUZZER_SUPPORTED)
if(LIBFUZZER_SUPPORTED AND (OPT_ENABLE_SANITIZER_ADDRESS OR OPT_ENABLE_SANITIZER_THREAD OR OPT_ENABLE_SANITIZER_UNDEFINED))
  set(DEFAULT_FUZZER ON)
else()
  set(DEFAULT_FUZZER OFF)
endif()
option(ENABLE_FUZZING "Enable Fuzzing Builds" ${DEFAULT_FUZZER})

option(ENABLE_HARDENING "Enable hardening" OFF)
#cmake_dependent_option(ENABLE_GLOBAL_HARDENING "Attempt to push hardening options to built dependencies" ON ENABLE_HARDENING OFF)


if(ENABLE_TESTING)
  if((CMAKE_CXX_COMPILER_ID MATCHES ".*Clang.*" OR CMAKE_CXX_COMPILER_ID MATCHES ".*GNU.*") AND NOT WIN32)
    set(SUPPORTS_UBSAN ON)
  else()
    set(SUPPORTS_UBSAN OFF)
  endif()
  if((CMAKE_CXX_COMPILER_ID MATCHES ".*Clang.*" OR CMAKE_CXX_COMPILER_ID MATCHES ".*GNU.*") AND WIN32)
    set(SUPPORTS_ASAN OFF)
  else()
    set(SUPPORTS_ASAN ON)
  endif()
endif()

find_program(PROGRAM_LLD NAMES "lld")
if(EXISTS PROGRAM_LLD)
  set(SUPPORTS_LLD ON)
else()
  set(SUPPORTS_LLD OFF)
  find_program(PROGRAM_GOLD NAMES "gold")
  if(EXISTS PROGRAM_GOLD AND (CMAKE_CXX_COMPILER_ID MATCHES ".*GNU.*") AND NOT WIN32)
    set(SUPPORTS_GOLD ON)
  else()
    set(SUPPORTS_GOLD OFF)
  endif()
endif()
if(UNIX AND NOT WIN32 AND NOT APPLE)
  find_program(PROGRAM_MOLD NAMES "mold")
  if(EXISTS PROGRAM_MOLD)
    set(SUPPORTS_MOLD ON)
  else()
    set(SUPPORTS_MOLD OFF)
  endif()
endif()
if(SUPPORTS_LLD OR SUPPORTS_GOLD OR SUPPORTS_MOLD)
  set(OPT_USE_CUSTOM_LINKER_LIST)
  if(SUPPORTS_MOLD)
    list(APPEND OPT_USE_CUSTOM_LINKER_LIST "${PROGRAM_MOLD}")
  endif()
  if(SUPPORTS_LLD)
    list(APPEND OPT_USE_CUSTOM_LINKER_LIST "${PROGRAM_LLD}")
  endif()
  if(SUPPORTS_GOLD)
    list(APPEND OPT_USE_CUSTOM_LINKER_LIST "${PROGRAM_GOLD}")
  endif()
  enum_option(OPT_USE_CUSTOM_LINKER ${OPT_USE_CUSTOM_LINKER_LIST} "Use Custom Linker")
  message("Use Linker: ${OPT_USE_CUSTOM_LINKER}")
endif()

if(NOT PROJECT_IS_TOP_LEVEL OR OPT_PACKAGING_MAINTAINER_MODE)
  option(OPT_ENABLE_IPO "Enable IPO/LTO" OFF)
  option(OPT_WARNINGS_AS_ERRORS "Treat Warnings As Errors" OFF)
  option(OPT_ENABLE_SANITIZER_ADDRESS "Enable address sanitizer" OFF)
  option(OPT_ENABLE_SANITIZER_UNDEFINED "Enable undefined sanitizer" OFF)
  option(OPT_ENABLE_SANITIZER_THREAD "Enable thread sanitizer" OFF)
  option(OPT_ENABLE_SANITIZER_MEMORY "Enable memory sanitizer" OFF)
  option(OPT_ENABLE_UNITY_BUILD "Enable unity builds" OFF)
  option(OPT_ENABLE_CLANG_TIDY "Enable clang-tidy" OFF)
  option(OPT_ENABLE_CPPCHECK "Enable cpp-check analysis" OFF)
  option(OPT_ENABLE_PCH "Enable precompiled headers" OFF)
  option(OPT_ENABLE_CACHE "Enable ccache" OFF)
else()
  option(OPT_ENABLE_IPO "Enable IPO/LTO" ON)
  option(OPT_WARNINGS_AS_ERRORS "Treat Warnings As Errors" OFF)
  option(OPT_ENABLE_SANITIZER_ADDRESS "Enable address sanitizer" ${SUPPORTS_ASAN})
  option(OPT_ENABLE_SANITIZER_UNDEFINED "Enable undefined sanitizer" ${SUPPORTS_UBSAN})
  option(OPT_ENABLE_SANITIZER_THREAD "Enable thread sanitizer" OFF)
  option(OPT_ENABLE_SANITIZER_MEMORY "Enable memory sanitizer" OFF)
  option(OPT_ENABLE_UNITY_BUILD "Enable unity builds" OFF)
  cmake_dependent_option(OPT_ENABLE_CLANG_TIDY "Enable clang-tidy" ON ENABLE_STATIC_ANALYZER OFF)
  cmake_dependent_option(OPT_ENABLE_CPPCHECK "Enable cpp-check analysis" ON ENABLE_STATIC_ANALYZER OFF)
  option(OPT_ENABLE_PCH "Enable precompiled headers" OFF)
  option(OPT_ENABLE_CACHE "Enable ccache" ON)
endif()
